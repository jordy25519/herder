#!/usr/bin/env ruby
require 'fileutils'
require 'yaml'
require './lib/ext/string'
require 'docker'

@herds = Hash.new
@file = 'data.yaml'

# Interperet terminal commands.
def interperet
	cmd = ARGV[0]
	case (cmd)
		when '-c','--create' then create
		when '--clean' then clean
		when '--help',nil then help
		when '-l','--list' then list
		when '-r','--run' then run
		when '-b','--bench' then benchmark
		else puts "Command: \"#{cmd}\" is unrecognized."
	end
end

# Log and collect resource usage stats on herd start up.
def benchmark
  herd_name = ARGV[1]
  dirty = (ARGV[2] === nil)
  delay, io_on, vm_on, log_tag_on = nil, false, false, false

  # Parse Arguments.
  ARGV.slice(3, ARGV.count).each do |arg|
   delay = ARGV[3].to_s[/[0-9]+/].to_i if arg.include? "-d"
   io_on = true if arg.include? "-io"
   vm_on = true if arg.include? "-vm"
   log_tag_on = true if arg.include? "-lt"
  end

  pids = Hash.new
  @threads = []

  unless dirty
    clean
    create
    herd_name = herd_name + "s"
  else
    unless @herds[herd_name]
      puts "No herd exists with name: '#{herd_name}'"
      return
    end
  end
  
  # Create directory for test run.
  run = herd_name + @herds[herd_name]["size"].to_s
  FileUtils.mkdir_p "tests/#{run}"
  
  # Start test time.
  @start_time = Time.now

  # Start vm and io monitoring threads.
  vmstat_thread = vmstat(run) if vm_on
  iostat_thread = iostat(run) if io_on

  # Begin threads for container stat collection.
  @herds[herd_name]["ids"].each_with_index do |id, n|
    system("docker start #{id}")
	pids[id] = `docker inspect -f '{{ .State.Pid }}' #{id}`.chomp
	puts "docker start #{id} Pid: #{pids[id]}"
	puts "Starting stats collection for container #{n} id:#{id}"
    @threads << Thread.new(id.chomp, n, pids[id]){|id, n, pid|
      container = Docker::Container.get(id.chomp)
            
      until(container.logs(stdout: true)[/Aviarc startup complete/])
        proc_io = IO.readlines("/sys/fs/cgroup/blkio/system.slice/docker-#{id}.scope/blkio.throttle.io_service_bytes").select{|e| e.include? "254:#{n + 1}"}.map{|e| e[/[0-9]+$/]}
        cpu_usage = IO.read("/sys/fs/cgroup/cpu/system.slice/docker-#{id}.scope/cpuacct.usage").to_csv
        memory = IO.readlines("/sys/fs/cgroup/memory/system.slice/docker-#{id}.scope/memory.stat")
        cache = memory[0].to_csv
        rss = memory[1].to_csv

	    File.open("tests/#{run}/#{n}.csv", "a") do |f|
          #Write headerline on first run.
          f.puts "timestamp,cpu_time,rbytes,wbytes,sbytes,abytes,rss,cache" if f.size == 0
          time = Time.now - @start_time
	      f.puts "#{time},#{cpu_usage},#{proc_io[0]},#{proc_io[1]},#{proc_io[2]},#{proc_io[3]},#{rss},#{cache}"
        end
	  end
	  
	  puts Time.now - @start_time
	  puts "Thread #{n} exited."
	}
      
    sleep delay if delay
    log_tag(id.chomp, "Creating Command Registry") if log_tag_on
  end

  # Wait for all container threads to finish and exit monitoring threads.
  @threads.each {|t| t.join}
  iostat_thread.exit if io_on
  vmstat_thread.exit if vm_on
  puts "Benchmarking complete."
  system("pkill vmstat") # vmstat is long running need to kill it.
end

# Pause bencmarking execution until container logs specified event.
def log_tag(id, tag)
  # Block until "Create Command registry" event.
  puts "Waiting for command registry"
  container = Docker::Container.get(id)
  until(container.logs(stdout: true)[/#{tag}/])
    # Do nothing until create registry event.
  end
end

# Start a VMstat monitoring thread.
def vmstat(test_run)
  Thread.new {
    f.puts `vmstat -n 1 | awk 'BEGIN { FS=" "; OFS="," } {$1=$1; print}' > tests/#{test_run}/vmstat.csv`
  }
end

# Start an IO monitoring thread for /dev/sda disk.
def iostat(test_run)
  Thread.new {
    intial_values = IO.read("/sys/block/sda/stat").chomp.split.map &:to_i
    while true
      current_values = IO.read("/sys/block/sda/stat").chomp.split.map &:to_i
	  counters = intial_values.each_with_index.map{ |e, i | current_values[i] - e }
	  counters = counters.join(",")
	  File.open("tests/#{test_run}/iorate.csv", "a") do |f|
	    # Write headerline on first run.
    	f.puts "rio,rmerge,rsect,rtick,wio,wmerge,wsect,wtick,running,active,wait" if f.size == 0
		f.puts counters
      end
      sleep 1
    end
  }
end

# Clean all docker containers.
def clean
 puts "Cleaning herds..."
 File.open(@file, 'w') {}
 %x[docker rm -f `docker ps --no-trunc -aq`]
end

# Instantiate a herd of docker containers.
def create
  image = ARGV[1]
  size = ARGV[2].to_i
  run_args = ARGV.drop(3).join(" ")
  
  # Convert image name to herd name.
  friendly_name = image
  friendly_name = /(?<=\/)\w+\b/.match(image).to_s if image.include?("/")
  herd_name = friendly_name + "s"

  # Create herd data.
  @herds[herd_name] = Hash["size" => size, "ids" => Array.new]

  puts "Creating herd..."
  size.times do |n|
    cmd = "docker create --cpuset-cpus=\"0,1\" --name #{friendly_name}#{n} #{image}"
    @herds[herd_name]["ids"][n] = `#{cmd}`
    puts cmd
  end
  commit_data
end

# Run a command against a herd.
def rund
	herd_name = ARGV[1]
	cmd = "docker " << ARGV[2]
	args = ARGV.drop(3).join(" ")
	
	unless @herds[herd_name]
		puts "No herd exists with name: '#{herd_name}'"
		return
	end

	@herds[herd_name]["ids"].each do |id|
	  `#{cmd} #{id} #{args}`
		puts "#{cmd} #{id} #{args}"
	end
end

# Write herd data to file for persistence.
def commit_data
	File.open(@file, 'w') { |file| YAML.dump(@herds, file)  }
end

# Load herd data from file.
# If file is blank or missing - intialise new hash instead.
def load_data
	if File.exists?(@file) and not File.zero?(@file)
		@herds = YAML.load_file("data.yaml") 
	else
		@herds = Hash.new
	end
end

# Print help commands.
def help
	puts "
 ___________
 < Herder >
 -----------
       \\   ^__^
        \\  (oo)\\_______
           (__)\\       )\\/\\
                ||----w |
                ||     ||"
	puts "Benchmark container startup:"
    puts "  herder --bench (<herd_name>|<image_name> <count>)[ options]"
    puts "-d int, delay | -lt, log tag delay | -vm, vmstat monitoring | -io, disk device monitoring"
    puts "<herd_name> will use an existing herd. <image_name> <count> will create a new herd."
    puts "Clean all Docker containers:"
	puts "  herder --clean"
	puts ""
	puts "Create a new herd:"
	puts "  herder -c <repository/image_name> <count>"
	puts ""
	puts "List herds:"
	puts "  herder -l"
	puts ""
	puts "Run command over a herd:"
  puts "  herder -r <herd_name> <docker_command>"
	puts ""
end

def list
	puts "Herds: "	
	@herds.keys.each do |h|
		puts " #{h}, size: #{@herds[h]["size"]}"
	end
end

##################
# Run the Script.#
##################
load_data
interperet
