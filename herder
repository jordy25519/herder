#!/bin/ruby

# Build herd
# herder -b count image_name herd_name

# Run mass command over herd.
# herder -h herd_name "start/stop/any docker command"

@data = Hash.new
@file = '/home/jordan/projects/herder/data.csv'

def interperet()
	cmd = ARGV[0]
	case (cmd)
		when '-b'
			build()
		when '-h'
			run()
		when '--clean'
			clean()
		else
			puts "Command: \"#{cmd}\" is unrecognized."
	end

end

# Instantiate a herd of docker containers.
def build()
	puts "Building herd...."
	n = ARGV[1].to_i
	image = ARGV[2]
	herd_name = ARGV[3]
	args = "docker create"
	commit("#{herd_name}_size", n)

	(1..n).each do |d|
		docker_cmd = args + " --name #{herd_name}#{d} #{image}"
		puts docker_cmd
		`#{docker_cmd}`
	end

end

# Clean all docker containers.
def clean
 puts "Cleaning herds..."
 exec("docker rm `docker ps --no-trunc -aq`")
 f = File.open(@file, 'w')
 f.puts("")
 f.close()
end

# Run a command against the herd.
def run()
	herd_name = ARGV[1]
	cmd = "docker " << ARGV[2]
	args = ARGV.drop(3).join(" ")
	n = @data["#{herd_name}_size"].to_i

	(1..n).each do |d|
		puts "#{cmd} #{herd_name}#{d} #{args}"
		`#{cmd} #{herd_name}#{d} #{args}`
	end
end

# Write a value to data file for storage.
def commit(key, value)
	f = File.open(@file, 'a')
	f.puts("#{key}, #{value}")
	f.close
end

# Load data for usage.
def load_data
	f = File.open(@file, 'r')
	f.each_line do |line|
		tokens = line.split(",")
		@data[tokens[0]] = tokens[1]
		puts "#{tokens[0]} #{tokens[1]}"
	end
	f.close()
end


# Run the script.
load_data()
puts "
 ___________
 < Herder >
 -----------
       \\   ^__^
        \\  (oo)\\_______
           (__)\\       )\\/\\
                ||----w |
                ||     ||"
interperet()
