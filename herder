#!/bin/ruby

@data = Hash.new
@file = 'data.csv'

# Interperet terminal commands.
def interperet()
	cmd = ARGV[0]
	case (cmd)
		when '-b' then build
		when '--clean' then clean
		when '--help' then help
		when '-r' then run
		else puts "Command: \"#{cmd}\" is unrecognized."
	end
end

# Instantiate a herd of docker containers.
def build()
	puts "Building herd..."
	n = ARGV[1].to_i
	image = ARGV[2]
	herd_name = ARGV[3]
	args = "docker create"
	commit(herd_name, n)

	(1..n).each do |d|
		docker_cmd = args + " --name #{herd_name}#{d} #{image}"
		puts docker_cmd
		`#{docker_cmd}`
	end
end

# Clean all docker containers.
def clean
 puts "Cleaning herds..."
 File.open(@file, 'w') {}
 exec("docker rm `docker ps --no-trunc -aq`")
end

# Run a command against the herd.
def run()
	herd_name = ARGV[1]
	cmd = "docker " << ARGV[2]
	args = ARGV.drop(3).join(" ")
	n = @data[herd_name].to_i

	(1..n).each do |d|
		puts "#{cmd} #{herd_name}#{d} #{args}"
		`#{cmd} #{herd_name}#{d} #{args}`
	end
end

# Write a value to data file for storage.
def commit(key, value)
	File.open(@file, 'a') { puts "#{key}, #{value}" }
end

# Load herd data from file.
def load_data
	File.open(@file, 'r').each_line do |line|
		tokens = line.split(",")
		@data[tokens[0]] = tokens[1]
		puts "#{tokens[0]} #{tokens[1]}"
	end
end

# Print help commands.
def help
	puts "Build a new herd:"
	puts "  herder -b <count> <image_name> <herd_name>"
	puts ""
	puts "Run commands over a herd:"
  puts "  herder -r <herd_name> <docker command>"
end


# Run the script.
load_data()
puts "
 ___________
 < Herder >
 -----------
       \\   ^__^
        \\  (oo)\\_______
           (__)\\       )\\/\\
                ||----w |
                ||     ||"
interperet()
