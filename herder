#!/bin/ruby
require 'active_support/inflector'

# Pipe the following command to the Spark Shell.
# Output should return 10000.
#RUN echo "sc.parallelize(1 to 1000).count()" | spark-shell --master yarn-client --driver-memory 1g --executor-memory 1g --executor-cores 1
@data = Hash.new
@file = 'data.csv'

# Interperet terminal commands.
def interperet
	cmd = ARGV[0]
	case (cmd)
		when '-b' then build
		when '-c' then create
		when '--clean' then clean
		when '--help',nil then help
		when '-r' then run
		else puts "Command: \"#{cmd}\" is unrecognized."
	end
end

# Build an image from dockerfile.
def build
	image_name = ARGV[1]
	docker_file_path = ARGV[2]

	cmd = "docker build --rm=true --tag=\"#{image_name}\" #{docker_file_path}"
	puts "Building image..."
	puts cmd
	system "#{cmd}"
end

# Clean all docker containers.
def clean
 puts "Cleaning herds..."
 File.open(@file, 'w') {}
 exec("docker rm `docker ps --no-trunc -aq`")
end

# Instantiate a herd of docker containers.
def create
	image = ARGV[1]
	friendly_name = image.split("/")[1]
	n = ARGV[2].to_i
	herd_name = friendly_name.pluralize
	args = "docker create"
	commit(herd_name, n)

	puts "Creating herd..."
	(1..n).each do |d|
		cmd = args + " --name #{friendly_name}#{d} #{image}"
		puts cmd
		system "#{cmd}"
	end
end

# Run a command against the herd.
def run
	herd_name = ARGV[1].singularize
	cmd = "docker " << ARGV[2]
	args = ARGV.drop(3).join(" ")
	n = @data[ARGV[1]].to_i
 puts args
	(1..n).each do |d|
		puts "#{cmd} #{herd_name}#{d} #{args}"
		system "#{cmd} #{herd_name}#{d} #{args}"
	end
end

# Write a value to data file for storage.
def commit(key, value)
	File.open(@file, 'a') { puts "#{key}, #{value}" }
end

# Load herd data from file.
def load_data
	File.open(@file, 'r').each_line do |line|
		tokens = line.split(",")
		@data[tokens[0]] = tokens[1]
		puts "Loaded herd: #{tokens[0]}, size: #{tokens[1]}"
	end if File.exists?(@file)
end

# Print help commands.
def help
	puts "Build a Dockerfile:"
	puts "  herder -b <repository/image_name> <path_to_dockerfile>"
	puts ""
	puts "Clean all Docker containers:"
	puts "  herder --clean"
	puts ""
	puts "Create a new herd:"
	puts "  herder -c <repository/image_name> <count>"
	puts ""
	puts "Run command over a herd:"
  puts "  herder -r <herd_name> <docker_command>"
end


# Run the script.
load_data
puts "
 ___________
 < Herder >
 -----------
       \\   ^__^
        \\  (oo)\\_______
           (__)\\       )\\/\\
                ||----w |
                ||     ||"
interperet
