<html>
<head></head>
<!DOCTYPE html>
<meta charset="utf-8">
<style>
</style>
<body>
  <%= select_tag :tests, options_for_select(@tests) %>
  <%= select_tag :filter_options, options_for_select(filter_options) %>
  <input id="range"/>
  <button id="render">render</button>
  <button id="download-svgs">Download SVGs</button>
  <div><br><br></div>
  <svg id="visualization" xmlns="http://www.w3.org/2000/svg"  width="1600" height="800"></svg>
</body>
<script>

// Main graph SVG.
var vis = vis == null ? null : vis;
var key = ""; //Dirty hack variable for passing data.
var dom = Array.apply(null, {length: 12}).map(Number.call, Number);
var sizes = <%= @sizes.to_s.html_safe %>; // List of file count in each test directory.
var colourBrewer = d3.scale.linear().domain(dom).range(colorbrewer.Paired[12]); // Generates colour palette.
var lines = [];
var xMax, yMin, yMax;

var render = function() {

  // Clear graph.
  $("#visualization").empty();

  // Filter CSV data by category e.g. Memory, CPU.
  var filter_options = $("#filter_options").val().trim();
  var options = ["timestamp"];
  if(filter_options == "Memory (bytes)")
    options.push("rss");
  else if(filter_options == "Memory instant (bytes)")
    options.push("rss_instant")
  else if(filter_options == "CPU usage (USER_HZ)")
    options.push("cpu_system", "cpu_user");
  else if(filter_options == "CPU time (nanoseconds)")
    options.push("cpu_time");
  else if(filter_options == "CPU instant (nanoseconds)")
    options.push("cpu_time_instant");
  else if(filter_options == "IO read (bytes)")
    options.push("rchar");
  else if(filter_options == "IO write (bytes)")
    options.push("wchar");
  else if(filter_options == "IO read instant (bytes)")
    options.push("rchar_instant");
  else if(filter_options == "IO write instant (bytes)")
    options.push("wchar_instant");
  else if(filter_options == "IO unpaged read (bytes)") 
    options.push("rbytes");
  else if(filter_options == "IO unpaged write (bytes)") 
    options.push("wbytes");
  else
    return null;
  
  // Get number of test files in selected test run.
  var size = +sizes[$("#tests")[0].selectedIndex];

  // Limit files to draw.
  var range = $("#range").val();
  if(range.indexOf(",") > -1)
    lines = range.split(",").map(Number);
  else if(range.indexOf("-") > -1){
    var r = range.split("-").map(Number);
    lines = Array.apply(null, {length: r[1]}).map(Number.call, Number).slice(r[0]);
  }
  else if(range.length == 1)
    lines = [Number(range)];
  else{
    lines = Array.apply(null, {length: size}).map(Number.call, Number);
  }
  
  console.log("options:" + options);
  console.log("size: " + size);
  console.log("lines: " + lines);

  // Find the min and max values in all CSVs to determine X and Y axis scale.
  // Intialise with extreme values.
  xMax = Number.MIN_SAFE_INTEGER;
  yMin = Number.MAX_SAFE_INTEGER;
  yMax = Number.MIN_SAFE_INTEGER;

  var taskQueue = queue(1);
  for (var i = 0; i < size; i++){
    var file = "/tests/" + $("#tests").val() + "aviarcs" + i + ".csv";
    taskQueue.defer(d3.csv, file);
  };
  
  // Wait for all CSVs to load.
  taskQueue.awaitAll(function(error, files){ 
    files.forEach(function(csv){
        var timestamp = +(csv[csv.length - 1].timestamp);
        xMax = (timestamp > xMax) ? timestamp : xMax;

        var csvStart = +(csv[0][options[1]]);
        var csvEnd = +(csv[csv.length - 1][options[1]]);
        yMin = (csvStart < yMin) ? csvStart : yMin;
        yMax = (csvEnd > yMax) ? csvEnd : yMax;
    });
    console.log("xMax: " + xMax);
    console.log("yMin: " + yMin + " yMax: " + yMax);
    
    // Build graph structure then plot lines.
    queue()
      .defer(buildGraph, options, size)
      .await(plotGraph(options, size));
  });

};

// Load each CSV and plot as a line.
function plotGraph(options, size){

  var svg = d3.select("#visualization");
  var k = lines[0];
  for (var i = 0; i < size; i++) {
    if($("#range").val() != "" && $.inArray(i, lines) == -1) continue;

    var file = "/tests/" + $("#tests").val() + "aviarcs" + i + ".csv";
    d3.csv(file, function(csv) {
      
      csv = csv.map(function(d) {
        new_data = {};
        options.forEach(function(key){
            new_data[key] = +d[key];
        });
        return new_data; 
      });

      var drawLine = d3.svg.line()
        .x(function(d) { return xScale(d.timestamp); })
        .y(function(d) { return yScale(d[key]); })
        .interpolate("linear");

      // Plot line for each CSV column.
      options.forEach(function(o)
      {
        if(o == "timestamp") return;
        key = o;
        svg.append('svg:path')
          .attr('d', drawLine(csv))
          .attr('stroke', getColour(k++))
          .attr('stroke-width', 2.0)
          .attr('fill', 'none');
      });

    }); //d3.csv

  } // for
}

// Construct SVG graph - axis, labels, etc.
function buildGraph(options, size) {

  vis = d3.select("#visualization"),
  WIDTH = $("#visualization").width(),
  HEIGHT = $("#visualization").height(),
  MARGINS = {
      top: 10,
      right: 10,
      bottom: 70,
      left: 180
  },

  xScale = d3.scale.linear()
  .range([0, WIDTH])
  .domain([0.0, xMax]),
  
  yScale = d3.scale.linear()
  .range([HEIGHT - MARGINS.bottom, MARGINS.bottom])
  .domain([yMin, yMax]),
  
  xAxis = d3.svg.axis()
  .outerTickSize(2)
  .scale(xScale)
  .tickPadding(25),

  yAxis = d3.svg.axis()
  .outerTickSize(2)
  .scale(yScale)
  .orient("left");

  var y = vis.append("svg:g")
    .attr("class", "y axis")
    .attr("transform", "translate(1,0)")
    .call(yAxis);

  var x = vis.append("svg:g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
    .call(xAxis);

  // Find widest label on Y-axis. Rescale SVG to stay flush left with the labels.
  var labelWidth = $(".y.axis").find(".tick").get(-1);
  labelWidth = labelWidth.getBBox().width + 3;

  y.attr("transform", "translate(" + labelWidth +", 0)");
  x.attr("transform", "translate(" + labelWidth + "," + (HEIGHT - MARGINS.bottom) + ")");
  xScale = d3.scale.linear()
    .range([labelWidth + 2, WIDTH])
    .domain([0.0, xMax]);

  console.log("Final Xmax: " + xMax);
  // Add legend. 
  var legend = vis.append("g")
    .attr("class", "legend")
    .attr("x", WIDTH - 65)
    .attr("y", 25)
    .attr("height", 100)
    .attr("width", 200);

  // Add title. 
  var title = vis.append("text")
    .attr("x", WIDTH/2)
    .attr("y", 30)
    .style("text-anchor", "middle")
    .text($("#filter_options").val() + " x Elapsed Time (Seconds)")
    .style("text-decoration", "underline");

  var legendY = function(i, block)
  {
    if (options[1].indexOf("instant") > -1) 
      return block ?  20 + i * 25 : 10 + i * 25;
    else
      return block ? HEIGHT - 490 - i * 25 : HEIGHT - 500 - i * 25;
  };

  var k = lines[0];
  legend.selectAll('g').data(new Array(size * (options.length - 1)))
    .enter()
    .append('g')
    .each(function(d, i) {
      var g = d3.select(this);
      
      if($("#range").val() != "" && $.inArray(i, lines) == -1)
        return;
      g.append("rect")
        .attr("x", MARGINS.right + 200)
        .attr("y", legendY(i, false))
        .attr("width", 10)
        .attr("height", 10)
        .style("fill", getColour(k));
      
      g.append("text")
        .attr("x", MARGINS.right + 225)
        .attr("y", legendY(i, true))
        .attr("height", 30)
        .attr("width", 100)
        .style("fill", getColour(k++))
        .text("c" + (i + 1));
    });
};

// Helper function to return colour code.
function getColour(i){
  return colourBrewer(i);
}

// Render each line/CSV file one by one and download.
var download = function() {
  console.log("downloading");
  var size = +sizes[$("#tests")[0].selectedIndex];

  for (var i = 0; i < size; i++) {

    // Wait for rendering to complete then download SVG.
    setTimeout(function() {
      
      $("#range").val(String(k++));
      $("#render").trigger("click");

      setTimeout(function() {
        // Click the graph to activate svg-crowbar download links.
        $("#visualization").trigger("click");

        // Get svg-crowbar link for main SVG.
        var link = $(".svg-crowbar").filter(function(){ return $(this).text().indexOf("SVG #0") > -1 })[1];

        // Click on its download button.
        $($(link).children()[0]).trigger("click");
      }, 3000);

    }, 5000 * i);

  } 
};

var k = 0;

$("#render").click(render);
$("#download-svgs").click(download);

</script>
</html>